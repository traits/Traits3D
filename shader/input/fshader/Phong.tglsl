in vec3 normal_out;
in vec3 vert_out;
in vec4 $v_out_color;
out vec4 $f_out_color;

//uniform int mode;

const vec3 lightPos = vec3(1.0,1.0,3.0);
const vec3 ambientColor = vec3(0.2, 0.0, 0.0);
//const vec3 diffuseColor = vec3(0.5, 0.0, 0.0);
vec3 diffuseColor = vec3($v_out_color);
const vec3 specColor = vec3(1.0, 1.0, 1.0);

void main() 
{
  vec3 normal = normalize(normal_out);
  vec3 lightDir = normalize(lightPos - vert_out);
  vec3 reflectDir = reflect(-lightDir, normal);
  vec3 viewDir = normalize(-vert_out);

  float lambertian = max(dot(lightDir,normal), 0.0);
  float specular = 0.0;

  if(lambertian > 0.0) 
  {
     float specAngle = max(dot(reflectDir, viewDir), 0.0);
     specular = pow(specAngle, 4.0);
  }
  $f_out_color = vec4(ambientColor +
                    lambertian*diffuseColor +
                    specular*specColor, 1.0);

  // only ambient
  //if(mode == 2) $f_out_color = vec4(ambientColor, 1.0);
  // only diffuse
  //if(mode == 3) 
  //$f_out_color = vec4(lambertian*diffuseColor, 1.0);
  // only specular
  //if(mode == 4) $f_out_color = vec4(specular*specColor, 1.0);
}
