in vec4 $v_out_color;
in vec3 N;
in vec3 V;
in vec3 L;
out vec4 $f_out_color;

const vec3 AmbientColour = vec3(0.2, 0.0, 0.0);
vec3 DiffuseColour = vec3($v_out_color);
const vec3 SpecularColour = vec3(1.0, 1.0, 1.0);
const float AmbientIntensity = 1.0;
const float DiffuseIntensity = 1.0;
const float SpecularIntensity = 1.0;
const float Roughness = 1.0/16.0;

// -1 for x<0; 1 else
float strictSign(float x)
{
	return step(0, x)*2 - 1;
}

void main()
{ 
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    vec3 v = normalize(-V);
    vec3 h = normalize(l+v);

    float diffuse = dot(l,n);
    float s = strictSign(diffuse);
    diffuse = s * diffuse;
    n = s * n;
    
    
    float specular = pow(max(0.0,dot(n,h)),1/Roughness);
    
    //// true Phong  shading  
    //vec3 reflectDir = reflect(-l, n);
    //float specAngle = max(dot(reflectDir, v), 0.0);
    // note that the exponent is different here
    //specular = pow(specAngle, 4.0);
   
    $f_out_color = vec4(AmbientColour*AmbientIntensity + 
                        DiffuseColour*diffuse*DiffuseIntensity +
                        SpecularColour*specular*SpecularIntensity,1);
    //$f_out_color = vec4(DiffuseColour,1.0);
}

